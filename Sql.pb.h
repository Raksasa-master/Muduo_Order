// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sql.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Sql_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Sql_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Sql_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Sql_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Sql_2eproto;
namespace SQL {
class Dish;
class DishDefaultTypeInternal;
extern DishDefaultTypeInternal _Dish_default_instance_;
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
}  // namespace SQL
PROTOBUF_NAMESPACE_OPEN
template<> ::SQL::Dish* Arena::CreateMaybeMessage<::SQL::Dish>(Arena*);
template<> ::SQL::Order* Arena::CreateMaybeMessage<::SQL::Order>(Arena*);
template<> ::SQL::Task* Arena::CreateMaybeMessage<::SQL::Task>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SQL {

enum Task_Task_List : int {
  Task_Task_List_News = 0,
  Task_Task_List_Dish_Insert = 1,
  Task_Task_List_Dish_Delete = 2,
  Task_Task_List_Dish_Update = 3,
  Task_Task_List_Dish_QueryOne = 4,
  Task_Task_List_Dish_QueryAll = 5,
  Task_Task_List_Order_Insert = 6,
  Task_Task_List_Order_Delete = 7,
  Task_Task_List_Order_Update = 8,
  Task_Task_List_Order_QueryOne = 9,
  Task_Task_List_Order_QueryAll = 10,
  Task_Task_List_Task_Task_List_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Task_Task_List_Task_Task_List_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Task_Task_List_IsValid(int value);
constexpr Task_Task_List Task_Task_List_Task_List_MIN = Task_Task_List_News;
constexpr Task_Task_List Task_Task_List_Task_List_MAX = Task_Task_List_Order_QueryAll;
constexpr int Task_Task_List_Task_List_ARRAYSIZE = Task_Task_List_Task_List_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Task_Task_List_descriptor();
template<typename T>
inline const std::string& Task_Task_List_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Task_Task_List>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Task_Task_List_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Task_Task_List_descriptor(), enum_t_value);
}
inline bool Task_Task_List_Parse(
    const std::string& name, Task_Task_List* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Task_Task_List>(
    Task_Task_List_descriptor(), name, value);
}
// ===================================================================

class Dish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SQL.Dish) */ {
 public:
  inline Dish() : Dish(nullptr) {};
  virtual ~Dish();

  Dish(const Dish& from);
  Dish(Dish&& from) noexcept
    : Dish() {
    *this = ::std::move(from);
  }

  inline Dish& operator=(const Dish& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dish& operator=(Dish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dish& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dish* internal_default_instance() {
    return reinterpret_cast<const Dish*>(
               &_Dish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Dish& a, Dish& b) {
    a.Swap(&b);
  }
  inline void Swap(Dish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dish* New() const final {
    return CreateMaybeMessage<Dish>(nullptr);
  }

  Dish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dish& from);
  void MergeFrom(const Dish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SQL.Dish";
  }
  protected:
  explicit Dish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sql_2eproto);
    return ::descriptor_table_Sql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDishIdFieldNumber = 1,
    kPriceFieldNumber = 3,
    kNumberFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 dish_id = 1;
  void clear_dish_id();
  ::PROTOBUF_NAMESPACE_ID::int32 dish_id() const;
  void set_dish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dish_id() const;
  void _internal_set_dish_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 price = 3;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 number = 4;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SQL.Dish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 dish_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sql_2eproto;
};
// -------------------------------------------------------------------

class Order PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SQL.Order) */ {
 public:
  inline Order() : Order(nullptr) {};
  virtual ~Order();

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(nullptr);
  }

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SQL.Order";
  }
  protected:
  explicit Order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sql_2eproto);
    return ::descriptor_table_Sql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 3,
    kDishIdsFieldNumber = 4,
    kOrderIdFieldNumber = 1,
    kTableIdFieldNumber = 2,
    kStateFieldNumber = 5,
  };
  // string time = 3;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_time(
      std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // string dish_ids = 4;
  void clear_dish_ids();
  const std::string& dish_ids() const;
  void set_dish_ids(const std::string& value);
  void set_dish_ids(std::string&& value);
  void set_dish_ids(const char* value);
  void set_dish_ids(const char* value, size_t size);
  std::string* mutable_dish_ids();
  std::string* release_dish_ids();
  void set_allocated_dish_ids(std::string* dish_ids);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dish_ids();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dish_ids(
      std::string* dish_ids);
  private:
  const std::string& _internal_dish_ids() const;
  void _internal_set_dish_ids(const std::string& value);
  std::string* _internal_mutable_dish_ids();
  public:

  // int32 order_id = 1;
  void clear_order_id();
  ::PROTOBUF_NAMESPACE_ID::int32 order_id() const;
  void set_order_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_order_id() const;
  void _internal_set_order_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 table_id = 2;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 5;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SQL.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dish_ids_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sql_2eproto;
};
// -------------------------------------------------------------------

class Task PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SQL.Task) */ {
 public:
  inline Task() : Task(nullptr) {};
  virtual ~Task();

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SQL.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Sql_2eproto);
    return ::descriptor_table_Sql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Task_Task_List Task_List;
  static constexpr Task_List News =
    Task_Task_List_News;
  static constexpr Task_List Dish_Insert =
    Task_Task_List_Dish_Insert;
  static constexpr Task_List Dish_Delete =
    Task_Task_List_Dish_Delete;
  static constexpr Task_List Dish_Update =
    Task_Task_List_Dish_Update;
  static constexpr Task_List Dish_QueryOne =
    Task_Task_List_Dish_QueryOne;
  static constexpr Task_List Dish_QueryAll =
    Task_Task_List_Dish_QueryAll;
  static constexpr Task_List Order_Insert =
    Task_Task_List_Order_Insert;
  static constexpr Task_List Order_Delete =
    Task_Task_List_Order_Delete;
  static constexpr Task_List Order_Update =
    Task_Task_List_Order_Update;
  static constexpr Task_List Order_QueryOne =
    Task_Task_List_Order_QueryOne;
  static constexpr Task_List Order_QueryAll =
    Task_Task_List_Order_QueryAll;
  static inline bool Task_List_IsValid(int value) {
    return Task_Task_List_IsValid(value);
  }
  static constexpr Task_List Task_List_MIN =
    Task_Task_List_Task_List_MIN;
  static constexpr Task_List Task_List_MAX =
    Task_Task_List_Task_List_MAX;
  static constexpr int Task_List_ARRAYSIZE =
    Task_Task_List_Task_List_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Task_List_descriptor() {
    return Task_Task_List_descriptor();
  }
  template<typename T>
  static inline const std::string& Task_List_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Task_List>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Task_List_Name.");
    return Task_Task_List_Name(enum_t_value);
  }
  static inline bool Task_List_Parse(const std::string& name,
      Task_List* value) {
    return Task_Task_List_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDishVectorFieldNumber = 5,
    kOrderVectorFieldNumber = 6,
    kNewsFieldNumber = 4,
    kAcceptFieldNumber = 7,
    kDishFieldNumber = 2,
    kOrderFieldNumber = 3,
    kOpFieldNumber = 1,
  };
  // repeated .SQL.Dish Dish_vector = 5;
  int dish_vector_size() const;
  private:
  int _internal_dish_vector_size() const;
  public:
  void clear_dish_vector();
  ::SQL::Dish* mutable_dish_vector(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SQL::Dish >*
      mutable_dish_vector();
  private:
  const ::SQL::Dish& _internal_dish_vector(int index) const;
  ::SQL::Dish* _internal_add_dish_vector();
  public:
  const ::SQL::Dish& dish_vector(int index) const;
  ::SQL::Dish* add_dish_vector();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SQL::Dish >&
      dish_vector() const;

  // repeated .SQL.Order Order_vector = 6;
  int order_vector_size() const;
  private:
  int _internal_order_vector_size() const;
  public:
  void clear_order_vector();
  ::SQL::Order* mutable_order_vector(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SQL::Order >*
      mutable_order_vector();
  private:
  const ::SQL::Order& _internal_order_vector(int index) const;
  ::SQL::Order* _internal_add_order_vector();
  public:
  const ::SQL::Order& order_vector(int index) const;
  ::SQL::Order* add_order_vector();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SQL::Order >&
      order_vector() const;

  // string news = 4;
  void clear_news();
  const std::string& news() const;
  void set_news(const std::string& value);
  void set_news(std::string&& value);
  void set_news(const char* value);
  void set_news(const char* value, size_t size);
  std::string* mutable_news();
  std::string* release_news();
  void set_allocated_news(std::string* news);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_news();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_news(
      std::string* news);
  private:
  const std::string& _internal_news() const;
  void _internal_set_news(const std::string& value);
  std::string* _internal_mutable_news();
  public:

  // string accept = 7;
  void clear_accept();
  const std::string& accept() const;
  void set_accept(const std::string& value);
  void set_accept(std::string&& value);
  void set_accept(const char* value);
  void set_accept(const char* value, size_t size);
  std::string* mutable_accept();
  std::string* release_accept();
  void set_allocated_accept(std::string* accept);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_accept();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_accept(
      std::string* accept);
  private:
  const std::string& _internal_accept() const;
  void _internal_set_accept(const std::string& value);
  std::string* _internal_mutable_accept();
  public:

  // .SQL.Dish dish = 2;
  bool has_dish() const;
  private:
  bool _internal_has_dish() const;
  public:
  void clear_dish();
  const ::SQL::Dish& dish() const;
  ::SQL::Dish* release_dish();
  ::SQL::Dish* mutable_dish();
  void set_allocated_dish(::SQL::Dish* dish);
  private:
  const ::SQL::Dish& _internal_dish() const;
  ::SQL::Dish* _internal_mutable_dish();
  public:
  void unsafe_arena_set_allocated_dish(
      ::SQL::Dish* dish);
  ::SQL::Dish* unsafe_arena_release_dish();

  // .SQL.Order order = 3;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::SQL::Order& order() const;
  ::SQL::Order* release_order();
  ::SQL::Order* mutable_order();
  void set_allocated_order(::SQL::Order* order);
  private:
  const ::SQL::Order& _internal_order() const;
  ::SQL::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::SQL::Order* order);
  ::SQL::Order* unsafe_arena_release_order();

  // .SQL.Task.Task_List op = 1;
  void clear_op();
  ::SQL::Task_Task_List op() const;
  void set_op(::SQL::Task_Task_List value);
  private:
  ::SQL::Task_Task_List _internal_op() const;
  void _internal_set_op(::SQL::Task_Task_List value);
  public:

  // @@protoc_insertion_point(class_scope:SQL.Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SQL::Dish > dish_vector_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SQL::Order > order_vector_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr news_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accept_;
  ::SQL::Dish* dish_;
  ::SQL::Order* order_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Sql_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Dish

// int32 dish_id = 1;
inline void Dish::clear_dish_id() {
  dish_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dish::_internal_dish_id() const {
  return dish_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dish::dish_id() const {
  // @@protoc_insertion_point(field_get:SQL.Dish.dish_id)
  return _internal_dish_id();
}
inline void Dish::_internal_set_dish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dish_id_ = value;
}
inline void Dish::set_dish_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dish_id(value);
  // @@protoc_insertion_point(field_set:SQL.Dish.dish_id)
}

// string name = 2;
inline void Dish::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Dish::name() const {
  // @@protoc_insertion_point(field_get:SQL.Dish.name)
  return _internal_name();
}
inline void Dish::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SQL.Dish.name)
}
inline std::string* Dish::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SQL.Dish.name)
  return _internal_mutable_name();
}
inline const std::string& Dish::_internal_name() const {
  return name_.Get();
}
inline void Dish::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Dish::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SQL.Dish.name)
}
inline void Dish::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SQL.Dish.name)
}
inline void Dish::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SQL.Dish.name)
}
inline std::string* Dish::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Dish::release_name() {
  // @@protoc_insertion_point(field_release:SQL.Dish.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Dish::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SQL.Dish.name)
}
inline std::string* Dish::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SQL.Dish.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Dish::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SQL.Dish.name)
}

// int32 price = 3;
inline void Dish::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dish::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dish::price() const {
  // @@protoc_insertion_point(field_get:SQL.Dish.price)
  return _internal_price();
}
inline void Dish::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void Dish::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:SQL.Dish.price)
}

// int32 number = 4;
inline void Dish::clear_number() {
  number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dish::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dish::number() const {
  // @@protoc_insertion_point(field_get:SQL.Dish.number)
  return _internal_number();
}
inline void Dish::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  number_ = value;
}
inline void Dish::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:SQL.Dish.number)
}

// -------------------------------------------------------------------

// Order

// int32 order_id = 1;
inline void Order::clear_order_id() {
  order_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_order_id() const {
  return order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::order_id() const {
  // @@protoc_insertion_point(field_get:SQL.Order.order_id)
  return _internal_order_id();
}
inline void Order::_internal_set_order_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  order_id_ = value;
}
inline void Order::set_order_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:SQL.Order.order_id)
}

// int32 table_id = 2;
inline void Order::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::table_id() const {
  // @@protoc_insertion_point(field_get:SQL.Order.table_id)
  return _internal_table_id();
}
inline void Order::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void Order::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:SQL.Order.table_id)
}

// string time = 3;
inline void Order::clear_time() {
  time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::time() const {
  // @@protoc_insertion_point(field_get:SQL.Order.time)
  return _internal_time();
}
inline void Order::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:SQL.Order.time)
}
inline std::string* Order::mutable_time() {
  // @@protoc_insertion_point(field_mutable:SQL.Order.time)
  return _internal_mutable_time();
}
inline const std::string& Order::_internal_time() const {
  return time_.Get();
}
inline void Order::_internal_set_time(const std::string& value) {
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_time(std::string&& value) {
  
  time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SQL.Order.time)
}
inline void Order::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SQL.Order.time)
}
inline void Order::set_time(const char* value,
    size_t size) {
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SQL.Order.time)
}
inline std::string* Order::_internal_mutable_time() {
  
  return time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_time() {
  // @@protoc_insertion_point(field_release:SQL.Order.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SQL.Order.time)
}
inline std::string* Order::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SQL.Order.time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_time(
    std::string* time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (time != nullptr) {
    
  } else {
    
  }
  time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SQL.Order.time)
}

// string dish_ids = 4;
inline void Order::clear_dish_ids() {
  dish_ids_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::dish_ids() const {
  // @@protoc_insertion_point(field_get:SQL.Order.dish_ids)
  return _internal_dish_ids();
}
inline void Order::set_dish_ids(const std::string& value) {
  _internal_set_dish_ids(value);
  // @@protoc_insertion_point(field_set:SQL.Order.dish_ids)
}
inline std::string* Order::mutable_dish_ids() {
  // @@protoc_insertion_point(field_mutable:SQL.Order.dish_ids)
  return _internal_mutable_dish_ids();
}
inline const std::string& Order::_internal_dish_ids() const {
  return dish_ids_.Get();
}
inline void Order::_internal_set_dish_ids(const std::string& value) {
  
  dish_ids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_dish_ids(std::string&& value) {
  
  dish_ids_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SQL.Order.dish_ids)
}
inline void Order::set_dish_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dish_ids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SQL.Order.dish_ids)
}
inline void Order::set_dish_ids(const char* value,
    size_t size) {
  
  dish_ids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SQL.Order.dish_ids)
}
inline std::string* Order::_internal_mutable_dish_ids() {
  
  return dish_ids_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_dish_ids() {
  // @@protoc_insertion_point(field_release:SQL.Order.dish_ids)
  return dish_ids_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_dish_ids(std::string* dish_ids) {
  if (dish_ids != nullptr) {
    
  } else {
    
  }
  dish_ids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dish_ids,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SQL.Order.dish_ids)
}
inline std::string* Order::unsafe_arena_release_dish_ids() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SQL.Order.dish_ids)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dish_ids_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_dish_ids(
    std::string* dish_ids) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dish_ids != nullptr) {
    
  } else {
    
  }
  dish_ids_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dish_ids, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SQL.Order.dish_ids)
}

// int32 state = 5;
inline void Order::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::state() const {
  // @@protoc_insertion_point(field_get:SQL.Order.state)
  return _internal_state();
}
inline void Order::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void Order::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SQL.Order.state)
}

// -------------------------------------------------------------------

// Task

// .SQL.Task.Task_List op = 1;
inline void Task::clear_op() {
  op_ = 0;
}
inline ::SQL::Task_Task_List Task::_internal_op() const {
  return static_cast< ::SQL::Task_Task_List >(op_);
}
inline ::SQL::Task_Task_List Task::op() const {
  // @@protoc_insertion_point(field_get:SQL.Task.op)
  return _internal_op();
}
inline void Task::_internal_set_op(::SQL::Task_Task_List value) {
  
  op_ = value;
}
inline void Task::set_op(::SQL::Task_Task_List value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:SQL.Task.op)
}

// .SQL.Dish dish = 2;
inline bool Task::_internal_has_dish() const {
  return this != internal_default_instance() && dish_ != nullptr;
}
inline bool Task::has_dish() const {
  return _internal_has_dish();
}
inline void Task::clear_dish() {
  if (GetArena() == nullptr && dish_ != nullptr) {
    delete dish_;
  }
  dish_ = nullptr;
}
inline const ::SQL::Dish& Task::_internal_dish() const {
  const ::SQL::Dish* p = dish_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SQL::Dish*>(
      &::SQL::_Dish_default_instance_);
}
inline const ::SQL::Dish& Task::dish() const {
  // @@protoc_insertion_point(field_get:SQL.Task.dish)
  return _internal_dish();
}
inline void Task::unsafe_arena_set_allocated_dish(
    ::SQL::Dish* dish) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dish_);
  }
  dish_ = dish;
  if (dish) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SQL.Task.dish)
}
inline ::SQL::Dish* Task::release_dish() {
  auto temp = unsafe_arena_release_dish();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SQL::Dish* Task::unsafe_arena_release_dish() {
  // @@protoc_insertion_point(field_release:SQL.Task.dish)
  
  ::SQL::Dish* temp = dish_;
  dish_ = nullptr;
  return temp;
}
inline ::SQL::Dish* Task::_internal_mutable_dish() {
  
  if (dish_ == nullptr) {
    auto* p = CreateMaybeMessage<::SQL::Dish>(GetArena());
    dish_ = p;
  }
  return dish_;
}
inline ::SQL::Dish* Task::mutable_dish() {
  // @@protoc_insertion_point(field_mutable:SQL.Task.dish)
  return _internal_mutable_dish();
}
inline void Task::set_allocated_dish(::SQL::Dish* dish) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dish_;
  }
  if (dish) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dish);
    if (message_arena != submessage_arena) {
      dish = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dish, submessage_arena);
    }
    
  } else {
    
  }
  dish_ = dish;
  // @@protoc_insertion_point(field_set_allocated:SQL.Task.dish)
}

// .SQL.Order order = 3;
inline bool Task::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool Task::has_order() const {
  return _internal_has_order();
}
inline void Task::clear_order() {
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
inline const ::SQL::Order& Task::_internal_order() const {
  const ::SQL::Order* p = order_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SQL::Order*>(
      &::SQL::_Order_default_instance_);
}
inline const ::SQL::Order& Task::order() const {
  // @@protoc_insertion_point(field_get:SQL.Task.order)
  return _internal_order();
}
inline void Task::unsafe_arena_set_allocated_order(
    ::SQL::Order* order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SQL.Task.order)
}
inline ::SQL::Order* Task::release_order() {
  auto temp = unsafe_arena_release_order();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SQL::Order* Task::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:SQL.Task.order)
  
  ::SQL::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::SQL::Order* Task::_internal_mutable_order() {
  
  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::SQL::Order>(GetArena());
    order_ = p;
  }
  return order_;
}
inline ::SQL::Order* Task::mutable_order() {
  // @@protoc_insertion_point(field_mutable:SQL.Task.order)
  return _internal_mutable_order();
}
inline void Task::set_allocated_order(::SQL::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(order);
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:SQL.Task.order)
}

// string news = 4;
inline void Task::clear_news() {
  news_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Task::news() const {
  // @@protoc_insertion_point(field_get:SQL.Task.news)
  return _internal_news();
}
inline void Task::set_news(const std::string& value) {
  _internal_set_news(value);
  // @@protoc_insertion_point(field_set:SQL.Task.news)
}
inline std::string* Task::mutable_news() {
  // @@protoc_insertion_point(field_mutable:SQL.Task.news)
  return _internal_mutable_news();
}
inline const std::string& Task::_internal_news() const {
  return news_.Get();
}
inline void Task::_internal_set_news(const std::string& value) {
  
  news_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Task::set_news(std::string&& value) {
  
  news_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SQL.Task.news)
}
inline void Task::set_news(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  news_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SQL.Task.news)
}
inline void Task::set_news(const char* value,
    size_t size) {
  
  news_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SQL.Task.news)
}
inline std::string* Task::_internal_mutable_news() {
  
  return news_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Task::release_news() {
  // @@protoc_insertion_point(field_release:SQL.Task.news)
  return news_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_news(std::string* news) {
  if (news != nullptr) {
    
  } else {
    
  }
  news_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), news,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SQL.Task.news)
}
inline std::string* Task::unsafe_arena_release_news() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SQL.Task.news)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return news_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Task::unsafe_arena_set_allocated_news(
    std::string* news) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (news != nullptr) {
    
  } else {
    
  }
  news_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      news, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SQL.Task.news)
}

// repeated .SQL.Dish Dish_vector = 5;
inline int Task::_internal_dish_vector_size() const {
  return dish_vector_.size();
}
inline int Task::dish_vector_size() const {
  return _internal_dish_vector_size();
}
inline void Task::clear_dish_vector() {
  dish_vector_.Clear();
}
inline ::SQL::Dish* Task::mutable_dish_vector(int index) {
  // @@protoc_insertion_point(field_mutable:SQL.Task.Dish_vector)
  return dish_vector_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SQL::Dish >*
Task::mutable_dish_vector() {
  // @@protoc_insertion_point(field_mutable_list:SQL.Task.Dish_vector)
  return &dish_vector_;
}
inline const ::SQL::Dish& Task::_internal_dish_vector(int index) const {
  return dish_vector_.Get(index);
}
inline const ::SQL::Dish& Task::dish_vector(int index) const {
  // @@protoc_insertion_point(field_get:SQL.Task.Dish_vector)
  return _internal_dish_vector(index);
}
inline ::SQL::Dish* Task::_internal_add_dish_vector() {
  return dish_vector_.Add();
}
inline ::SQL::Dish* Task::add_dish_vector() {
  // @@protoc_insertion_point(field_add:SQL.Task.Dish_vector)
  return _internal_add_dish_vector();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SQL::Dish >&
Task::dish_vector() const {
  // @@protoc_insertion_point(field_list:SQL.Task.Dish_vector)
  return dish_vector_;
}

// repeated .SQL.Order Order_vector = 6;
inline int Task::_internal_order_vector_size() const {
  return order_vector_.size();
}
inline int Task::order_vector_size() const {
  return _internal_order_vector_size();
}
inline void Task::clear_order_vector() {
  order_vector_.Clear();
}
inline ::SQL::Order* Task::mutable_order_vector(int index) {
  // @@protoc_insertion_point(field_mutable:SQL.Task.Order_vector)
  return order_vector_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SQL::Order >*
Task::mutable_order_vector() {
  // @@protoc_insertion_point(field_mutable_list:SQL.Task.Order_vector)
  return &order_vector_;
}
inline const ::SQL::Order& Task::_internal_order_vector(int index) const {
  return order_vector_.Get(index);
}
inline const ::SQL::Order& Task::order_vector(int index) const {
  // @@protoc_insertion_point(field_get:SQL.Task.Order_vector)
  return _internal_order_vector(index);
}
inline ::SQL::Order* Task::_internal_add_order_vector() {
  return order_vector_.Add();
}
inline ::SQL::Order* Task::add_order_vector() {
  // @@protoc_insertion_point(field_add:SQL.Task.Order_vector)
  return _internal_add_order_vector();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SQL::Order >&
Task::order_vector() const {
  // @@protoc_insertion_point(field_list:SQL.Task.Order_vector)
  return order_vector_;
}

// string accept = 7;
inline void Task::clear_accept() {
  accept_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Task::accept() const {
  // @@protoc_insertion_point(field_get:SQL.Task.accept)
  return _internal_accept();
}
inline void Task::set_accept(const std::string& value) {
  _internal_set_accept(value);
  // @@protoc_insertion_point(field_set:SQL.Task.accept)
}
inline std::string* Task::mutable_accept() {
  // @@protoc_insertion_point(field_mutable:SQL.Task.accept)
  return _internal_mutable_accept();
}
inline const std::string& Task::_internal_accept() const {
  return accept_.Get();
}
inline void Task::_internal_set_accept(const std::string& value) {
  
  accept_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Task::set_accept(std::string&& value) {
  
  accept_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SQL.Task.accept)
}
inline void Task::set_accept(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accept_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SQL.Task.accept)
}
inline void Task::set_accept(const char* value,
    size_t size) {
  
  accept_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SQL.Task.accept)
}
inline std::string* Task::_internal_mutable_accept() {
  
  return accept_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Task::release_accept() {
  // @@protoc_insertion_point(field_release:SQL.Task.accept)
  return accept_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_accept(std::string* accept) {
  if (accept != nullptr) {
    
  } else {
    
  }
  accept_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accept,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SQL.Task.accept)
}
inline std::string* Task::unsafe_arena_release_accept() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SQL.Task.accept)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return accept_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Task::unsafe_arena_set_allocated_accept(
    std::string* accept) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (accept != nullptr) {
    
  } else {
    
  }
  accept_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      accept, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SQL.Task.accept)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SQL

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SQL::Task_Task_List> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SQL::Task_Task_List>() {
  return ::SQL::Task_Task_List_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Sql_2eproto
